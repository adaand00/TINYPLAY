
TinyPLay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800040  000001f4  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800046  00800046  0000028e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005c7  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003fb  00000000  00000000  000008e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000348  00000000  00000000  00000cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033f  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ce  00000000  00000000  0000138b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001459  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 27       	eor	r17, r17
  18:	1f bf       	out	0x3f, r17	; 63
  1a:	cf e5       	ldi	r28, 0x5F	; 95
  1c:	d0 e0       	ldi	r29, 0x00	; 0
  1e:	de bf       	out	0x3e, r29	; 62
  20:	cd bf       	out	0x3d, r28	; 61

00000022 <__do_copy_data>:
  22:	20 e0       	ldi	r18, 0x00	; 0
  24:	a0 e4       	ldi	r26, 0x40	; 64
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	e4 ef       	ldi	r30, 0xF4	; 244
  2a:	f1 e4       	ldi	r31, 0x41	; 65
  2c:	02 c0       	rjmp	.+4      	; 0x32 <__do_copy_data+0x10>
  2e:	31 91       	ld	r19, Z+
  30:	3d 93       	st	X+, r19
  32:	a6 34       	cpi	r26, 0x46	; 70
  34:	b2 07       	cpc	r27, r18
  36:	d9 f7       	brne	.-10     	; 0x2e <__do_copy_data+0xc>

00000038 <__do_clear_bss>:
  38:	20 e0       	ldi	r18, 0x00	; 0
  3a:	a6 e4       	ldi	r26, 0x46	; 70
  3c:	b0 e0       	ldi	r27, 0x00	; 0
  3e:	01 c0       	rjmp	.+2      	; 0x42 <.do_clear_bss_start>

00000040 <.do_clear_bss_loop>:
  40:	1d 93       	st	X+, r17

00000042 <.do_clear_bss_start>:
  42:	af 34       	cpi	r26, 0x4F	; 79
  44:	b2 07       	cpc	r27, r18
  46:	e1 f7       	brne	.-8      	; 0x40 <.do_clear_bss_loop>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	d2 c0       	rjmp	.+420    	; 0x1f0 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
unsigned char failed = 0;

int main( void )
{
	// set directions
	DDRB = 1<<DDATA | 1<<DCLK;
  4e:	45 e0       	ldi	r20, 0x05	; 5
  50:	41 b9       	out	0x01, r20	; 1
	// Disable digital input for button pin
	DIDR0 = 1<<BIN;
  52:	42 e0       	ldi	r20, 0x02	; 2
  54:	47 bb       	out	0x17, r20	; 23
	// Set ADC pin	
	ADMUX = BIN;
  56:	41 e0       	ldi	r20, 0x01	; 1
  58:	4b bb       	out	0x1b, r20	; 27
	// Enable ADC and start conversion
	ADCSRA = 1<<ADEN | 1<<ADSC | 1<<ADATE | 0b100;
  5a:	44 ee       	ldi	r20, 0xE4	; 228
  5c:	4d bb       	out	0x1d, r20	; 29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5e:	41 ee       	ldi	r20, 0xE1	; 225
  60:	54 e0       	ldi	r21, 0x04	; 4
  62:	41 50       	subi	r20, 0x01	; 1
  64:	50 40       	sbci	r21, 0x00	; 0
  66:	e9 f7       	brne	.-6      	; 0x62 <__stack+0x3>
  68:	00 c0       	rjmp	.+0      	; 0x6a <__stack+0xb>
  6a:	00 00       	nop
	// loop
	while (1)
	{
		_delay_ms(5);
		
		timeSincePress++;
  6c:	48 a1       	lds	r20, 0x48	; 0x800048 <timeSincePress>
  6e:	4f 5f       	subi	r20, 0xFF	; 255
  70:	48 a9       	sts	0x48, r20	; 0x800048 <timeSincePress>
		
		// Read analog input
		char butt = ADCL;
  72:	49 b3       	in	r20, 0x19	; 25
		char newpressedright;
		char newpressedleft;
		if(butt > 160){
  74:	41 3a       	cpi	r20, 0xA1	; 161
  76:	38 f4       	brcc	.+14     	; 0x86 <__stack+0x27>
			//both buttons pressed
			newpressedright = 1;	
			newpressedleft = 1;
		}else if(butt > 120){
  78:	49 37       	cpi	r20, 0x79	; 121
  7a:	40 f4       	brcc	.+16     	; 0x8c <__stack+0x2d>
			//right button pressed 				
			newpressedright = 1;
			newpressedleft = 0;	
		}else if(butt > 100){
  7c:	45 36       	cpi	r20, 0x65	; 101
  7e:	48 f0       	brcs	.+18     	; 0x92 <__stack+0x33>
			//left button pressed	
			newpressedright = 0;
			newpressedleft = 1;
  80:	61 e0       	ldi	r22, 0x01	; 1
			//right button pressed 				
			newpressedright = 1;
			newpressedleft = 0;	
		}else if(butt > 100){
			//left button pressed	
			newpressedright = 0;
  82:	70 e0       	ldi	r23, 0x00	; 0
  84:	08 c0       	rjmp	.+16     	; 0x96 <__stack+0x37>
		char newpressedright;
		char newpressedleft;
		if(butt > 160){
			//both buttons pressed
			newpressedright = 1;	
			newpressedleft = 1;
  86:	61 e0       	ldi	r22, 0x01	; 1
		char butt = ADCL;
		char newpressedright;
		char newpressedleft;
		if(butt > 160){
			//both buttons pressed
			newpressedright = 1;	
  88:	71 e0       	ldi	r23, 0x01	; 1
  8a:	05 c0       	rjmp	.+10     	; 0x96 <__stack+0x37>
			newpressedleft = 1;
		}else if(butt > 120){
			//right button pressed 				
			newpressedright = 1;
			newpressedleft = 0;	
  8c:	60 e0       	ldi	r22, 0x00	; 0
			//both buttons pressed
			newpressedright = 1;	
			newpressedleft = 1;
		}else if(butt > 120){
			//right button pressed 				
			newpressedright = 1;
  8e:	71 e0       	ldi	r23, 0x01	; 1
  90:	02 c0       	rjmp	.+4      	; 0x96 <__stack+0x37>
			newpressedright = 0;
			newpressedleft = 1;
		}else{
			//no button pressed
			newpressedright = 0;
			newpressedleft = 0;
  92:	60 e0       	ldi	r22, 0x00	; 0
			//left button pressed	
			newpressedright = 0;
			newpressedleft = 1;
		}else{
			//no button pressed
			newpressedright = 0;
  94:	70 e0       	ldi	r23, 0x00	; 0
			newpressedleft = 0;
		}
		
		//detect rising edge on left button
		if(newpressedleft & ~(pressedleft) & (playerPosition!=2)){
  96:	4a a1       	lds	r20, 0x4a	; 0x80004a <pressedleft>
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	40 95       	com	r20
  9c:	50 95       	com	r21
  9e:	86 2f       	mov	r24, r22
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	48 23       	and	r20, r24
  a4:	59 23       	and	r21, r25
  a6:	e1 a1       	lds	r30, 0x41	; 0x800041 <playerPosition>
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	e2 30       	cpi	r30, 0x02	; 2
  ae:	11 f4       	brne	.+4      	; 0xb4 <__stack+0x55>
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	84 23       	and	r24, r20
  b6:	95 23       	and	r25, r21
  b8:	89 2b       	or	r24, r25
  ba:	19 f0       	breq	.+6      	; 0xc2 <__stack+0x63>
			playerPosition += 1;
  bc:	ef 5f       	subi	r30, 0xFF	; 255
  be:	e1 a9       	sts	0x41, r30	; 0x800041 <playerPosition>
			timeSincePress = 0;
  c0:	18 a9       	sts	0x48, r17	; 0x800048 <timeSincePress>
		}
		
		//detect rising edge on right button
		if(newpressedright & ~(pressedright) & (playerPosition!=0)){
  c2:	4b a1       	lds	r20, 0x4b	; 0x80004b <pressedright>
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	40 95       	com	r20
  c8:	50 95       	com	r21
  ca:	87 2f       	mov	r24, r23
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	48 23       	and	r20, r24
  d0:	59 23       	and	r21, r25
  d2:	e1 a1       	lds	r30, 0x41	; 0x800041 <playerPosition>
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	e1 13       	cpse	r30, r17
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__stack+0x81>
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	84 23       	and	r24, r20
  e2:	95 23       	and	r25, r21
  e4:	89 2b       	or	r24, r25
  e6:	19 f0       	breq	.+6      	; 0xee <__stack+0x8f>
			playerPosition -= 1;
  e8:	e1 50       	subi	r30, 0x01	; 1
  ea:	e1 a9       	sts	0x41, r30	; 0x800041 <playerPosition>
			timeSincePress = 0;
  ec:	18 a9       	sts	0x48, r17	; 0x800048 <timeSincePress>
		}
		
		pressedright = newpressedright;
  ee:	7b a9       	sts	0x4b, r23	; 0x80004b <pressedright>
		pressedleft = newpressedleft;
  f0:	6a a9       	sts	0x4a, r22	; 0x80004a <pressedleft>
		
		// Move obstacle down
		if(numUpdates++ > moveTime){
  f2:	4c a1       	lds	r20, 0x4c	; 0x80004c <numUpdates>
  f4:	5d a1       	lds	r21, 0x4d	; 0x80004d <numUpdates+0x1>
  f6:	64 2f       	mov	r22, r20
  f8:	75 2f       	mov	r23, r21
  fa:	6f 5f       	subi	r22, 0xFF	; 255
  fc:	7f 4f       	sbci	r23, 0xFF	; 255
  fe:	7d a9       	sts	0x4d, r23	; 0x80004d <numUpdates+0x1>
 100:	6c a9       	sts	0x4c, r22	; 0x80004c <numUpdates>
 102:	60 a1       	lds	r22, 0x40	; 0x800040 <__DATA_REGION_ORIGIN__>
 104:	86 2f       	mov	r24, r22
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	84 17       	cp	r24, r20
 10a:	95 07       	cpc	r25, r21
 10c:	78 f5       	brcc	.+94     	; 0x16c <__stack+0x10d>
			
			rows[currentRow] = rows[currentRow] >> 1;
 10e:	ee a1       	lds	r30, 0x4e	; 0x80004e <currentRow>
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	ee 5b       	subi	r30, 0xBE	; 190
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	40 81       	ld	r20, Z
 118:	46 95       	lsr	r20
 11a:	40 83       	st	Z, r20
			moved++;
 11c:	49 a1       	lds	r20, 0x49	; 0x800049 <moved>
 11e:	4f 5f       	subi	r20, 0xFF	; 255
 120:	49 a9       	sts	0x49, r20	; 0x800049 <moved>
			
			
			
			// all rows have moved
			if(moved == 3){
 122:	43 30       	cpi	r20, 0x03	; 3
 124:	19 f5       	brne	.+70     	; 0x16c <__stack+0x10d>
				
				// detect obstacle
				if((rows[playerPosition] & 1))
 126:	51 a1       	lds	r21, 0x41	; 0x800041 <playerPosition>
 128:	e5 2f       	mov	r30, r21
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	ee 5b       	subi	r30, 0xBE	; 190
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	40 81       	ld	r20, Z
 132:	40 ff       	sbrs	r20, 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <__stack+0xdb>
				{
					failed = 1;
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	46 a9       	sts	0x46, r20	; 0x800046 <__data_end>
				}
				
				//reset counters
				moved = 0;
 13a:	19 a9       	sts	0x49, r17	; 0x800049 <moved>
				numUpdates = 0;
 13c:	1d a9       	sts	0x4d, r17	; 0x80004d <numUpdates+0x1>
 13e:	1c a9       	sts	0x4c, r17	; 0x80004c <numUpdates>
				
				// Add new obstacle every n rows
				lastadd++;
 140:	47 a1       	lds	r20, 0x47	; 0x800047 <lastadd>
 142:	4f 5f       	subi	r20, 0xFF	; 255
 144:	47 a9       	sts	0x47, r20	; 0x800047 <lastadd>
				if(lastadd == 3){
 146:	43 30       	cpi	r20, 0x03	; 3
 148:	89 f4       	brne	.+34     	; 0x16c <__stack+0x10d>
					unsigned char row = timeSincePress & 0b11;
 14a:	e8 a1       	lds	r30, 0x48	; 0x800048 <timeSincePress>
 14c:	e3 70       	andi	r30, 0x03	; 3
					if(row == 3){
 14e:	e3 30       	cpi	r30, 0x03	; 3
 150:	09 f4       	brne	.+2      	; 0x154 <__stack+0xf5>
						row = playerPosition;
 152:	e5 2f       	mov	r30, r21
					}
					rows[row] = rows[row] | 0b00100000;
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ee 5b       	subi	r30, 0xBE	; 190
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	40 81       	ld	r20, Z
 15c:	40 62       	ori	r20, 0x20	; 32
 15e:	40 83       	st	Z, r20
					lastadd = 0;
 160:	17 a9       	sts	0x47, r17	; 0x800047 <lastadd>
					moveTime -= moveTime>>4;
 162:	46 2f       	mov	r20, r22
 164:	42 95       	swap	r20
 166:	4f 70       	andi	r20, 0x0F	; 15
 168:	64 1b       	sub	r22, r20
 16a:	60 a9       	sts	0x40, r22	; 0x800040 <__DATA_REGION_ORIGIN__>
		//  b7 < b6 < b5 < b4 < b3 < b2 < b1 < b0 
		//  R4 | R3 | R2 | R1 | R0 | C2 | C1 | C0
		//
		// Row source, column sink
		
		char buff = (rows[currentRow] | (playerPosition==currentRow))<<3 |((1<<currentRow)^0b00000111);
 16c:	6e a1       	lds	r22, 0x4e	; 0x80004e <currentRow>
 16e:	e6 2f       	mov	r30, r22
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	ee 5b       	subi	r30, 0xBE	; 190
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	70 81       	ld	r23, Z
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	81 a1       	lds	r24, 0x41	; 0x800041 <playerPosition>
 17e:	86 17       	cp	r24, r22
 180:	11 f0       	breq	.+4      	; 0x186 <__stack+0x127>
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	47 2b       	or	r20, r23
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	44 0f       	add	r20, r20
 18e:	55 1f       	adc	r21, r21
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <__stack+0x13f>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <__stack+0x13b>
 1a2:	67 e0       	ldi	r22, 0x07	; 7
 1a4:	58 2f       	mov	r21, r24
 1a6:	56 27       	eor	r21, r22
 1a8:	45 2b       	or	r20, r21
		
		if (failed)
 1aa:	56 a1       	lds	r21, 0x46	; 0x800046 <__data_end>
 1ac:	51 13       	cpse	r21, r17
		{
			buff = 0b11111000;
 1ae:	48 ef       	ldi	r20, 0xF8	; 248
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	12 c0       	rjmp	.+36     	; 0x1da <__stack+0x17b>
		
		// Serial shift out, highest bit first. 
		for(int i = 0; i < 8; i++)
		{
			// Set clock low
			PORTB &= ~(1<<DCLK);
 1b6:	52 b1       	in	r21, 0x02	; 2
 1b8:	5e 7f       	andi	r21, 0xFE	; 254
 1ba:	52 b9       	out	0x02, r21	; 2
			
			
			if(buff & 0x80){
 1bc:	44 23       	and	r20, r20
 1be:	24 f4       	brge	.+8      	; 0x1c8 <__stack+0x169>
				PORTB |= 1<<DDATA;
 1c0:	52 b1       	in	r21, 0x02	; 2
 1c2:	54 60       	ori	r21, 0x04	; 4
 1c4:	52 b9       	out	0x02, r21	; 2
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <__stack+0x16f>
			}else{
				PORTB &= ~(1<<DDATA);
 1c8:	52 b1       	in	r21, 0x02	; 2
 1ca:	5b 7f       	andi	r21, 0xFB	; 251
 1cc:	52 b9       	out	0x02, r21	; 2
			}
			
			// Set clock High
			PORTB |= 1<<DCLK;
 1ce:	52 b1       	in	r21, 0x02	; 2
 1d0:	51 60       	ori	r21, 0x01	; 1
 1d2:	52 b9       	out	0x02, r21	; 2

			buff = buff<<1;
 1d4:	44 0f       	add	r20, r20
		{
			buff = 0b11111000;
		}
		
		// Serial shift out, highest bit first. 
		for(int i = 0; i < 8; i++)
 1d6:	6f 5f       	subi	r22, 0xFF	; 255
 1d8:	7f 4f       	sbci	r23, 0xFF	; 255
 1da:	68 30       	cpi	r22, 0x08	; 8
 1dc:	71 07       	cpc	r23, r17
 1de:	5c f3       	brlt	.-42     	; 0x1b6 <__stack+0x157>

			buff = buff<<1;
		}
		
		// next row of multiplex
		if(++currentRow == 3)
 1e0:	4e a1       	lds	r20, 0x4e	; 0x80004e <currentRow>
 1e2:	4f 5f       	subi	r20, 0xFF	; 255
 1e4:	4e a9       	sts	0x4e, r20	; 0x80004e <currentRow>
 1e6:	43 30       	cpi	r20, 0x03	; 3
 1e8:	09 f0       	breq	.+2      	; 0x1ec <__stack+0x18d>
 1ea:	39 cf       	rjmp	.-398    	; 0x5e <main+0x10>
		{
			currentRow = 0;
 1ec:	1e a9       	sts	0x4e, r17	; 0x80004e <currentRow>
 1ee:	37 cf       	rjmp	.-402    	; 0x5e <main+0x10>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
